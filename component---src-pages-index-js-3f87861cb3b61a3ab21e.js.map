{"version":3,"sources":["webpack:///./src/components/style/emo-home-posts.js","webpack:///./src/pages/index.js"],"names":["Card","styled","CardColumns","mwS","small","css","medium","large","xLarge","SinglePost","Freshnew","props","position","zIndex","padding","background","right","Update","Index","children","query","render","data","allMarkdownRemark","edges","map","node","key","id","to","fields","slug","Math","abs","round","Date","frontmatter","update","getTime","days","date","subtitle","excerpt","fixed","featuredImage","childImageSharp"],"mappings":"2FAAA,sMAIaA,GAJb,UAIoBC,YAAH,2BAAGA,CAAH,mRAkBJC,EAAcD,YAAH,2BAAGA,CAAH,yFAMpBE,IAAIC,MAAMC,YAAV,eANoB,IASpBF,IAAIG,OAAOD,YAAX,yCAToB,IAYpBF,IAAII,MAAMF,YAAV,yCAZoB,IAepBF,IAAIK,OAAOH,YAAX,yCAfoB,KAoBXI,EAAaR,YAAH,2BAAGA,CAAH,uHAWnBE,IAAIC,MAAMC,YAAV,eAXmB,KA6BVK,EAAWT,YAAH,4BAAGA,EAAY,SAAAU,GAAK,MAAK,CAC5CC,SAAU,WACVC,OAAQ,EACRC,QAAS,OACTC,WAAY,UACZC,MAAO,MAEIC,EAAShB,YAAH,4BAAGA,EAAY,SAAAU,GAAK,MAAK,CAC3CC,SAAU,WACVC,OAAQ,EACRC,QAAS,OACTC,WAAY,UACZC,MAAO,O,kCCnFR,qGA0GeE,UA9FD,SAAC,GAAD,EAAGC,SAAH,OACb,kBAAC,IAAD,CACAC,MAAK,aAuCJC,OAAW,SAAAC,GAAI,OACd,kBAAC,IAAD,KACG,kBAAC,IAAD,KACGA,EAAKC,kBAAkBC,MAAMC,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OAChC,kBAAC,IAAD,CAAOC,IAAKD,EAAKE,IACf,kBAAC,IAAD,CAAMC,GAAIH,EAAKI,OAAOC,MACpB,kBAAC,IAAD,KACEC,KAAKC,IAAID,KAAKE,OAAO,IAAIC,KAAKT,EAAKU,YAAYC,QAAQC,WAAY,IAAIH,MAAOG,WAlDjFC,UAkD0G,GACvGb,EAAKU,YAAYC,SAAWX,EAAKU,YAAYI,MAC3C,kBAAC,IAAD,eAEFR,KAAKC,IAAID,KAAKE,OAAO,IAAIC,KAAKT,EAAKU,YAAYC,QAAQC,WAAY,IAAIH,MAAOG,WAtDjFC,UAsD0G,GACxGb,EAAKU,YAAYC,SAAWX,EAAKU,YAAYI,MAC5C,kBAAC,IAAD,kBAEA,kBAAC,IAAD,KACC,kBAAC,IAAD,KAAYd,EAAKU,YAAYK,UAC5B,kBAAC,IAAD,KACGf,EAAKgB,iBAQpB,kBAAC,IAAD,KACGpB,EAAKC,kBAAkBC,MAAMC,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OAChC,kBAAC,IAAD,CAAMC,IAAKD,EAAKE,IACd,kBAAC,IAAD,CAAMC,GAAIH,EAAKI,OAAOC,MACpB,kBAAC,IAAD,KACEC,KAAKC,IAAID,KAAKE,OAAO,IAAIC,KAAKT,EAAKU,YAAYC,QAAQC,WAAY,IAAIH,MAAOG,WA1EjFC,UA0E0G,GACvGb,EAAKU,YAAYC,SAAWX,EAAKU,YAAYI,MAC3C,kBAAC,IAAD,eAEFR,KAAKC,IAAID,KAAKE,OAAO,IAAIC,KAAKT,EAAKU,YAAYC,QAAQC,WAAY,IAAIH,MAAOG,WA9EjFC,UA8E0G,GACxGb,EAAKU,YAAYC,SAAWX,EAAKU,YAAYI,MAC5C,kBAAC,IAAD,kBAEA,kBAAC,IAAD,CACEG,MAAOjB,EAAKU,YAAYQ,cAAcC,gBAAgBF","file":"component---src-pages-index-js-3f87861cb3b61a3ab21e.js","sourcesContent":["import  styled , { css } from \"react-emotion\";\nimport  { mwS } from \"./breakpoints\";\nimport { useState, useEffect } from 'react';\n\nexport const Card = styled.div`\n    background: #fff;\n    margin-bottom: 20px;\n    transform: scale(1);\n    -o-transition: 0.5s all ease;\n    transition: 0.5s all ease;\n    opacity: 1;\n    display:flex;\n  justify-content: center;\n  align-items: center;\n    flex-direction: column;\n    outline: solid black 2px;\n   &:hover {\n     background: #e6e6e6;\n     transform: scale(0.9999);\n   }\n`;\n\nexport const CardColumns = styled.div`\n  -moz-column-gap: 3rem;\n  column-gap: 3rem;\n  display: list;\n  grid-template-columns: repeat(1, 1fr);\n  \n  ${mwS.small(css`\n    opacity: 1;\n  `)};\n  ${mwS.medium(css`\n    grid-template-columns: repeat(2, 1fr);\n  `)};\n  ${mwS.large(css`\n    grid-template-columns: repeat(2, 1fr);\n  `)};\n  ${mwS.xLarge(css`\n    grid-template-columns: repeat(3, 1fr);\n  `)};\n`;\n\nexport const SinglePost = styled.div`\n  & .gatsby-image-wrapper {\n    -o-transition: 0.2s all ease;\n    transition: 0.2s all ease;\n  }\n  // ${Card}:hover & .gatsby-image-wrapper {\n  //   opacity: 0.5;\n  // }\n  & .gatsby-image-wrapper {\n    height: 250px;\n  }\n  ${mwS.small(css`\n    opacity: 1;\n  `)};\n`;\n\nexport const PostImage = styled.img(props => ({\n  width: \"100%\"\n}));\n\nexport const PostInfo = styled.div(props => ({}));\n\nexport const PreTitle = styled.h6(props => ({\n  fontWeight: \"500\",\n  display: \"block\",\n  padding: \"17px\",\n  textTransform: \"uppercase\"\n}));\n\nexport const Freshnew = styled.span(props => ({\n  position: \"absolute\",\n  zIndex: 1,\n  padding: \"15px\",\n  background: \"#a5d6a7\",\n  right: 0\n}));\nexport const Update = styled.span(props => ({\n\tposition: \"absolute\",\n\tzIndex: 1,\n\tpadding: \"15px\",\n\tbackground: \"#fdd835\",\n\tright: 0\n}));\n\nexport const Title = styled.h4(props => ({\n  fontWeight: \"500\",\n  display: \"block\",\n  padding: \"17px\",\n\tpaddingBottom: 0\n}));\n\nexport const Subtitle = styled.h5(props => ({\n\tfontWeight: \"500\",\n\tdisplay: \"block\",\n\tcolor: \"black\",\n\tpaddingLeft: \"17px\",\n\tpaddingBottom: \"17px\",\n  textTransform: \"uppercase\",\n}));\n\nexport const Excrept = styled.p(props => ({\n  padding: \"17px\",\n  paddingTop: 0,\n  a: {\n    fontWeight: 700\n  }\n}));\n\n\n// UNSUCCESSFUL ATTEMPT AT USING HOOKS\n\n// const {useState, useMemo } = React;\n\n// const useHover = () => {\n//   const [hovered, setHovered] = useState();\n  \n//   const eventHandlers = useMemo(() => ({\n//     onMouseOver() { setHovered(true); },\n//     onMouseOut() { setHovered(false); }\n//   }), []);\n  \n//   return [hovered, eventHandlers];\n// }\n\n// function CardStatus(props) {\n//   const [hovered,setHovered] = useHover(props.frontmatter.id);\n\n//   return(\n//     <div style={{background: '#e6e6e6',\n//     outline: \"solid black 2px\"}}></div>\n//   );\n\n// }\n\n","import React from \"react\";\nimport { StaticQuery, graphql, Link } from \"gatsby\";\nimport Layout from \"../components/layout\";\nimport Img from \"gatsby-image\";\nimport { SinglePost, Update, Freshnew, Card, CardColumns, Subtitle }  from \"../components/style/emo-home-posts\";\nimport { SinglePost2, PostInfo2, PreTitle2, Subtitle2, Update2, Freshnew2, Excrept2, Card2, CardColumns2 }  from \"../components/style/emo-home-posts-2\";\n\nlet minutes = 1000 * 60;\nlet hours = minutes * 60;\nlet days = hours * 24;\nlet months = days * 30;\n\nconst Index = ({ children }) => (\n\t<StaticQuery\n\tquery = { \n\t\tgraphql`\n\t\tquery {\n      allMarkdownRemark(\n        sort: { fields: [frontmatter___order], order: ASC }\n      ) {\n        edges {\n          node {\n            id\n            excerpt(pruneLength: 5000)\n            fields {\n              slug\n            }\n            frontmatter {\n              date(formatString: \"DD MMMM, YYYY\")\n              update(formatString: \"DD MMMM, YYYY\")\n              title\n              category\n              featuredImage {\n                childImageSharp {\n                  fixed(width: 400) {\n                    ...GatsbyImageSharpFixed\n                    base64\n                    tracedSVG\n                    aspectRatio\n                    src\n                    srcSet\n                    srcWebp\n                    srcSetWebp\n                    originalName\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\t\t`}\n\t\trender = { data => (\n\t\t\t<Layout>\n      <CardColumns2>\n        {data.allMarkdownRemark.edges.map(({ node }) => (\n          <Card2 key={node.id}>\n            <Link to={node.fields.slug}>\n              <SinglePost2>\n\t              {Math.abs(Math.round((new Date(node.frontmatter.update).getTime() - new Date().getTime()) / months)) <= 1 &&\n\t               node.frontmatter.update !== node.frontmatter.date &&(\n                  <Update2>Update</Update2>\n                )}\n\t              {Math.abs(Math.round((new Date(node.frontmatter.update).getTime() - new Date().getTime()) / months)) <= 1 &&\n\t              node.frontmatter.update === node.frontmatter.date &&(\n\t\t              <Freshnew2>Fresh New</Freshnew2>\n\t              )}\n                <PostInfo2>\n\t                <Subtitle2>{node.frontmatter.subtitle}</Subtitle2>\n                  <Excrept2>\n                    {node.excerpt}\n                    </Excrept2>\n                </PostInfo2>\n              </SinglePost2>\n            </Link>\n          </Card2>\n        ))}\n      </CardColumns2>\n      <CardColumns>\n        {data.allMarkdownRemark.edges.map(({ node }) => (\n          <Card key={node.id}>\n            <Link to={node.fields.slug}>\n              <SinglePost>\n\t              {Math.abs(Math.round((new Date(node.frontmatter.update).getTime() - new Date().getTime()) / months)) <= 1 &&\n\t               node.frontmatter.update !== node.frontmatter.date &&(\n                  <Update>Update</Update>\n                )}\n\t              {Math.abs(Math.round((new Date(node.frontmatter.update).getTime() - new Date().getTime()) / months)) <= 1 &&\n\t              node.frontmatter.update === node.frontmatter.date &&(\n\t\t              <Freshnew>Fresh New</Freshnew>\n\t              )}\n                <Img\n                  fixed={node.frontmatter.featuredImage.childImageSharp.fixed}\n                />\n                \n              </SinglePost>\n            </Link>\n          </Card>\n        ))}\n      </CardColumns>\n    </Layout>\n\t\t\t\t\t)}\n\t\t/>\n\t\t);\n\nexport default Index;\n\n"],"sourceRoot":""}